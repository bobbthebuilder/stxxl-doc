/*! \page external_pq stxxl::priority_queue

Basically, the priority queue provides insertion of new elements as well as inspection and deletion of the element on top. 
The invariant guarantees that the top element is the largest of all inserted element identified by comparison realized 
by the customizable comparator class. 
The small example below uses a comparison function cmp(a,b) which returns true, if a is larger than b, otherwise false.
Consequently, this priority queue serves it's smallest element on top. The additional min_value() function ensures that 
cmp(min_value(),x) is true for every x.

Stxxl's priority queue implementation stxxl::priority_queue needs less than a third of I/Os used by other similar cache (I/O)
efficient priority queues. In addition, parallel disks and overlapping I/O and computation is supported.

To make use of stxxl::priority_queue, we can use the generator template stxxl::PRIORITY_QUEUE_GENERATOR which expects the following parameters:

parameters (required if not optional) | default value              | note about the parameter
:----------------------------------   | :------------------------: | :-------------------------------
data_type 			      |           none             |  POD, with no reference to internal memory
comparator class 		      |           none		   |  operator() (which must define strict-weak-ordering) and min_value() are both required 
internal_memory_limit 		      |           none             |  internal memory consumption in bytes
number_of_elements 		      |           none             |  in 1024 units 
tuning_parameter (optional)	      |           6		   |  can be larger than 6 

\n

\snippet pq1.cpp example



*/