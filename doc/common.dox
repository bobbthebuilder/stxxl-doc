/***************************************************************************
 *  doc/common.dox
 *
 *  Part of the STXXL. See http://stxxl.sourceforge.net
 *
 *  Copyright (C) 2013 Timo Bingmann <tb@panthema.net>
 *
 *  Distributed under the Boost Software License, Version 1.0.
 *  (See accompanying file LICENSE_1_0.txt or copy at
 *  http://www.boost.org/LICENSE_1_0.txt)
 **************************************************************************/

/*! \page common Common Utilities and Helpers found in STXXL

A lots of basic utility classes and helper functions have accumulated in
STXXL. Try are usually fundamental enough to be also used in an application
program.  Before implementing a common software utility, please check the list
below; it might already exist in STXXL:

- \subpage common_random "random number generators"
- \subpage common_timer "timestamp and timer function"
- \subpage common_simple_vector "a non-growing, non-initializing simple_vector"
- \subpage common_counting_ptr "reference counted (shared) objects via counting_ptr"
- \subpage common_thread_sync "synchronization primitives for multi-threading"
- \subpage common_logging "logging macros"
- \subpage common_assert "macros for checking assertions"
- \subpage common_types "signed and unsigned integer types"
- \subpage common_misc_macros "miscellaneous macros"

 */

/*! \page common_random Random Number Generators

See file common/rand.h

TODO-df

*/

/*! \page common_timer Timestamp and Timer Classes

See file common/timer.h

TODO-df

*/

/*! \page common_simple_vector A Non-growing, Non-initializing Simpler Vector

For applications where a std::vector is overkill, or one wishes to allocate an
uninitialied POD array, the stxxl::simple_vector is a good method.

*/

/*! \page common_counting_ptr Reference Counted (Shared) Objects

Some objects in STXXL are reference counted. This is usually done for large
objects, which should not be copied deeply in assignments. Instead, a reference
counting pointer is used, which holds a handle while the pointer exists and
deletes the object once all pointers go out of scope. Examples are matrices and
sorted_runs.

The method used is called stxxl::counting_ptr or intrusive reference counting.
This is similar, but not identical to boost or TR1's shared_ptr.

The stxxl::counting_ptr is accompanied by stxxl::counted_object, which contains
the actual reference counter (a single integer). A reference counted object
must derive from stxxl::counted_object:

\code
struct something : public stxxl::counted_object
{
};
\endcode

Code that now wishes to use pointers referencing this object, will typedef an
stxxl::counting_ptr, which is used to increment and decrement the included
reference counter automatically.

\code
typedef stxxl::counting_ptr<something> something_ptr
{
    // create new instance of something
    something_ptr p1 = new something;
    {
        // create a new reference to the same instance (no deep copy!)
        something_ptr p2 = p1;
        // this block end will decrement the reference count, but not delete the object
    }
    // this block end will delete the object
}
\endcode

The stxxl::counting_ptr can generally be used like a usual pointer or
shared_ptr (see the docs for more).

There is also stxxl::const_counting_ptr to return const objects (note that a
const stxxl::counting_ptr will only render the pointer const, not the enclosed
object).

*/

/*! \page common_thread_sync Synchronization Primitives for Multi-Threading

To support multi-threading, some parts of STXXL use synchronization primitives
to ensure correct results. The primitives are based either on pthreads or on
Boost classes.

\section mutex Mutexes

For simple mutual exclusion contexts, stxxl::mutex objects should be used
together with scoped locks:

\code
class Something
{
    stxxl::mutex m_mtx;
    void critical_function()
    {
        stxxl::scoped_mutex_lock lock(m_mtx);
        // do something requiring locking
    }
};
\endcode

\section semaphore Semaphores

Additionally stxxl::semaphore is available if counting is required.

\section further Further Primitives: State and OnOff-Switch

stxxl::state is a synchronized state switching mechanism?

stxxl::onoff_switch is a two state semaphore thing?

*/

/*! \page common_logging Logging Macros STXXL_MSG

All STXXL components should output log or trace messages using the following
macros. There are two basic methods for logging using ostream syntax:

\code
// for plain messages
STXXL_MSG("text " << var)
// for error messages
STXXL_ERRMSG("error message " << reason)
\endcode

For debugging and tracing the following macros can be used for increasing
levels of verbosity:

\code
// level 0 (for current debugging)
STXXL_VERBOSE0("text " << var)
// level 1,2 and 3 for more verbose debugging level
STXXL_VERBOSE1("text " << var)
STXXL_VERBOSE2("text " << var)
STXXL_VERBOSE3("text " << var)
\endcode

A method used by some submodule authors to create their own levels of verbosity
is to make their own debugging macros:

\code
#define STXXL_VERBOSE_VECTOR(msg) STXXL_VERBOSE1("vector[" << static_cast<const void *>(this) << "]::" << msg)
\endcode

*/

/*! \page common_assert Macros for Checking Assertions

There are quite a bunch of macros for testing assertions. You must be careful
to pick the right one depending on when and what you want to assert on.

\section static Compile-time Assertions: STXXL_STATIC_ASSERT

To check specific conditions at compile time use STXXL_STATIC_ASSERT.

\code
struct item { int a,b,c,d; }
STXXL_STATIC_ASSERT(sizeof(item) == 4 * sizeof(int));
\endcode

\section unittest Assertions in Unit Tests: STXXL_CHECK

Assertions in unit tests must use the following macros to ensure that the
condition is also checked in release builds (where a plain \c "assert()" is
void). These \c CHECK function should NOT be used to test return values, since
we try to throw exceptions instead of aborting the program.

\code
// test a condition
STXXL_CHECK( 2+2 == 4 );
// test a condition and output a more verbose reason on failure
STXXL_CHECK2( 2+2 == 4, "We cannot count!");
\endcode

\section plain Plain Assertions: assert

For the usual assertions, that should be removed in production code for
performance, we use the standard \c "assert()" function.

However, there is also \c STXXL_ASSERT(), which can be used as a replacement
for \c assert(), when compiler warnings about unused variables or typedefs
occur. The issue is that assert() completely removes the code, whereas
STXXL_ASSERT() keeps the code encloses it inside \c if(0).

TODO: STXXL_THROW

*/

/*! \page common_types Signed and Unsigned Integer Types

STXXL provides two very important types: stxxl::int_type and stxxl::unsigned_type. These should be used for general counting and indexing types, as they are defined to be the size of a register on the machines: on 32-bit machines the two types are 4 bytes size, while on a 64-bit machine the two types are 8 bytes in size!

The previous types are for general purpose counting. For real 64-bit integers, also on 32-bit machines, STXXL also provides a stxx::uint64 type (independent of other headers).

See the file common/types.h

\section common_types_uint uint40 and uint48 Unsigned Integer Types

When storing file offsets in external memory, one often does not require full 64-bit indexes. Mostly, 40-bit or 48-bit are sufficient, if only < 1 TiB or < 16 TiB of data are processed. If one stores theses integers in five or six bytes, the total I/O volume can be reduced significantly.

Since this issue occurs commonly in EM algorithms, STXXL provides two types: stxxl::uint40 and stxxl::uint48.

See the file common/uint_types.h

*/

/*! \page common_misc_macros Miscellaneous Macros

\section namespaces __STXXL_BEGIN_NAMESPACE

A long, long time ago, not all compilers supported C++ namespaces, thus STXXL
uses the macros __STXXL_BEGIN_NAMESPACE and __STXXL_END_NAMESPACE, which open
and close the \c "namespace stxxl".

\section unused STXXL_UNUSED

STXXL_UNUSED is not actually a macro. It is a remedy against "unused variable"
warnings, for whatever reason. Usage:

\code
void function(int x)
{
    STXXL_UNUSED(x);
}
\endcode

\section likely LIKELY and UNLIKEY

Some compilers have facilities to specify whether a condition is likely or
unlikely to be true. This may have consequences on how to layout the assembler
code better.

\code
if (LIKELY(x > 1)) { ... }
if (UNLIKELY(x > 8)) { ... }
\endcode

\section deprecated Deprecated Functions

Some compilers can warn the user about deprecated function by tagging them in
the source. In STXXL we use the macro _STXXL_DEPRECATED(...) to enclose
deprecated functions.

*/
