/*! \page external_vector stxxl::vector
This section describes how stxxl::vector as Stxxl's most universal container works. 
The stxxl::vector is an array whose size can vary dynamically. 
The content of this vector is striped block-wise over the disks using an assignment strategy given as a template parameter. 
Some of the blocks are cached in a vector cache of fixed size (customizable by template parameters block_size, number_of_pages, page_size). 
The replacement of cache blocks is controlled by a specified page-replacement strategy (set as template parameter paging_strategy). 
stxxl::vector has STL compatible Random Access Iterators. An random access costs O(1) I/Os in the worst case. 
Sequential scanning of the vector costs O(1/DB) amortized I/Os per vector element. 
The internal memory consumption of stxxl::vector can be approximated by (block_size) x (number_of_pages) x (page_size). 





\snippet vector1.cpp example

Before creating a stxxl::vector, we can use the generator template stxxl::VECTOR_GENERATOR to define individual vector parameters next to value_type, the type of contained objects. 
Note that the value_type is required, the other parameters are optional due to already predefined default values as shown in the table below.

parameters (optional if not required)	      	    | default value       	 | possible (permitted) values
:-------------------------  			    | :------------------------: | :-------------------------------
value_type (required) 	    			    |		none		 |  POD,  with no reference to internal memory
block_size 					    |		2*1024*1024    	 |  ?
number_of_pages 				    |           8		 |  ?
page_size 					    |		4		 |  ?
alloc_strategy 					    |		stxxl::RC      	 |  stxxl::striping, stxxl::SR, stxxl::FR, stxxl::RC
paging_strategy 				    |		stxxl::lru     	 |  stxxl::random, stxxl::lru

*/
