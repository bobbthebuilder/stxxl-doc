// -*- mode: c++; mode: visual-line; mode: flyspell; fill-column: 100000 -*-
/***************************************************************************
 *  doc/install.dox
 *
 *  Installation and Linking Instruction for STXXL using cmake
 *
 *  Part of the STXXL. See http://stxxl.sourceforge.net
 *
 *  Copyright (C) 2013 Timo Bingmann <tb@panthema.net>
 *
 *  Distributed under the Boost Software License, Version 1.0.
 *  (See accompanying file LICENSE_1_0.txt or copy at
 *  http://www.boost.org/LICENSE_1_0.txt)
 **************************************************************************/

/** \page install Compilation and Configuration

\subpage install_unix

\subpage install_windows

\subpage install_config

*/

/** \page install_unix Compiling and Installing the STXXL on Linux/Unix Variants

\author Timo Bingmann (2013)

Precondition: Make sure GNU \c make, \c cmake >= 2.8, \c git and a C++ compiler are installed. See \ref faq_compilers on which systems and compilers are currently supported.

There are two methods to use STXXL:
- The first is recommended for small (prototype) projects consisting of only a single source file. It uses the \c local/ directory within the STXXL directory tree.
- For larger projects, the STXXL library should be linked as a library inside a subdirectory, much the way most KDE libraries are used.

There are quite some \ref install_build_options, which you can use in both setting.

\section install_unix_local Simple Projects in local/

1. Clone the STXXL project repository as <tt>\b my-project</tt>.
\verbatim
$ git clone https://github.com/bingmann/stxxl.git my-project
\endverbatim

2. Compile the STXXL library in a \c build subdirectory, including the example in \c local/.
\verbatim
$ mkdir my-project/build
$ cd my-project/build
$ cmake -DCMAKE_BUILD_TYPE=Debug ..
<lots of output by cmake>
$ make
<lots of compilation messages>
\endverbatim

3. Run the example program \c test1 in \c local/
\verbatim
(inside my-project/build/)
$ cd local
$ ./test1
<lots of output>
\endverbatim

For your own prototype project you can immediately start modifying \c test1.cpp or create a new .cpp in \c local/. The cmake scripts will automatically compile and link all \c .cpp files in \c local/ correctly with STXXL.

\section install_unix_subproject Including STXXL as a Cmake Subproject

The second method is for including STXXL in a larger program as a subproject. This is particularly easy with \c cmake: one can just \c add_directory(stxxl) in a CMakeLists.txt. The following guide shows how to start a simple cmake project and use STXXL in a subdirectory.

The advantage of this method is that the STXXL is a subproject of your's. Thereby it will always be compiled with the <b>same set</b> of CFLAGS or CMAKE_BUILD_TYPE as your project. This is most convenient for debugging projects, as the STXXL has a lot of debug code. When running experiments or going into production, the whole project must be build with \c CMAKE_BUILD_TYPE=Release or similar to remove the debug code.

1. Create an empty directory \c "my-project" and clone the STXXL inside it.
\verbatim
$ mkdir my-project
$ cd my-project
$ git clone https://github.com/bingmann/stxxl.git
\endverbatim

2. Create a file named \c CMakeLists.txt inside your \c my-project folder with the following sample content:
\verbatim
# CMakeLists.txt example for STXXL

project(my-project)
cmake_minimum_required(VERSION 2.8)

# Disallow in-source builds
if("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")
  message(SEND_ERROR "In-source builds are not allowed.")
endif("${PROJECT_SOURCE_DIR}" STREQUAL "${PROJECT_BINARY_DIR}")

# Enable warnings (always good)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W -Wall")

# Include the STXXL library in my-project
add_subdirectory(stxxl)

# Add STXXL includes path
include_directories(${STXXL_INCLUDES})

# Build a program and link it with STXXL.
add_executable(project main.cpp)
target_link_libraries(project ${STXXL_LIBS})
\endverbatim

3. To show how that this build system works, we now copy the \c test1.cpp from STXXL to the new project as \c main.cpp and build it.
\verbatim
$ cp stxxl/local/test1.cpp main.cpp
$ mkdir build
$ cd build
$ cmake -DCMAKE_BUILD_TYPE=Debug ..
<lots of output by cmake>
$ make
<lots of compilation messages>
\endverbatim

4. Test the compilation by running \c project
\verbatim
$ ./project
\endverbatim

\section install_unix_library Including STXXL as a Library

Since STXXL compiles into a static library plus template include files, there will some day be binary distributions of compiled versions. However, this is still in the future and not a high priority, since STXXL's interface is still evolving.

\section install_build_options Options for Build Configuration

STXXL has some optional features and compile switches that can be changed at build time.

- Maybe the most important one is switching between \b Debug and \b Release builds. Debug builds are <b>very slow</b>, as STXXL contains many assertions (which are a feature not a bug). With \c cmake the mode is easily defined by using
\verbatim
$ cmake -DCMAKE_BUILD_TYPE=Debug ...
<or>
$ cmake -DCMAKE_BUILD_TYPE=Release ...
\endverbatim
The mode mostly changes CXXFLAGS.

- Some parts of STXXL have been parallelized using the __gnu_parallel (aka MCSTL) library. Currently, with cmake one can only use the newer __gnu_parallel library by defining
\verbatim
$ cmake -DUSE_GNU_PARALLEL=ON ...
\endverbatim
when building. The cmake script will check availability of the corresponding header files.

- Using Boost for file I/O, multi-threading support and more. Boost is required on Windows and is cmake tries to automatically find it. On Linux/Unix it is optional (and not recommended), but can be activated using
\verbatim
$ cmake -DUSE_BOOST=ON ...
\endverbatim

- STXXL contains a set of unit tests in \c tests/, which verify most of the libraries functionality. These programs are not built by default, because this makes it easier for STXXL to be used as cmake subproject (\ref install_unix_subproject). The test suite can be built and run using
\verbatim
$ cmake -DBUILD_TESTS=ON ...
<compile>
$ make test
\endverbatim
There is also a \c BUILD_EXTRAS configuration flag to build even more, longer running tests. Be advised that the test suite need quite some space on your disks.

# Create a Disk Configuration File

For STXXL is function beyond very simple examples, you must define the \link install_config disk configuration file \endlink. The simplest method is to create a file named \c '.stxxl' the same directory as you execute the program. A basic configuration might be:
\verbatim
# file path,maximum capacity of the disk,access method
disk=/tmp/stxxl,1G,syscall_unlink
\endverbatim
Please see \ref install_config for further available options.

*/

/** \page install_windows Compiling and Installing the STXXL on Microsoft Windows

TODO

*/

/** \page install_config Disk Configuration Files

\author Timo Bingmann (2013)

A main feature of the STXXL is to take advantage of parallel access to \b multiple disks. For this, you must define the disk configuration in a text file, commonly named \c '.stxxl', using the syntax described below.

These are the locations STXXL will look for a disk configuration file, in decreasing order of precedence:
- If the environment variable \c STXXLCFG specifies a file, this is used.
- Then the current directory of the program is checked (<b>usual method</b>):
  - first for <tt>.stxxl.$HOSTNAME</tt> (for host specific configuration),
  - then for <tt>.stxxl</tt> (for general configuration).
- Then the \c $HOME directory of the current user is checked
  - first for <tt>$HOME/.stxxl.$HOSTNAME</tt> (for host specific configuration),
  - then for <tt>$HOME/.stxxl</tt> (for general configuration).

If no file is found at the locations above, STXXL will by default create a 1000 MiB file in \c /var/tmp/stxxl.

On many distributions the \c $HOSTNAME variable is not exported. For the host specific configuration to work, you must add <tt>"export HOSTNAME"</tt> to your shell configuration (<tt>.bashrc</tt>).

\section install_config_format Disk Configuration File Format

Each line of the configuration file describes a disk. Lines starting with '#' are comments.

A disk description uses the following format:
\verbatim
disk=full_disk_filename,capacity,access_method
\endverbatim

Description of the parameters:

- \c full_disk_filename : full disk filename. In order to access disks STXXL uses \b file access methods. Each disk is represented as a file. If you have a disk that is mounted in Unix to the path /mnt/disk0/, then the correct value for the \c full_disk_filename would be \c /mnt/disk0/some_file_name ,

- \c capacity : maximum capacity of the disk

  - the following size suffixes are recognized:
    - \c K, \c M, \c G, \c T, \c P (powers of 10),
    - \c Ki, \c Mi, \c Gi, \c Ti, \c Pi (powers of 2).
    - if a number has no suffix, \c M (megabyte) is assumed.

  - 0 means autogrow, and the file will be deleted afterwards.

- \c access_method : \c STXXL has a number of different file access implementations, choose one of them:

  - \c syscall : use \c read and \c write system calls which perform disk transfers directly on user memory pages without superfluous copying (currently the fastest method)

  - \c <b>syscall_unlink</b> : is a variant of \c syscall, which unlinks the file immediately after creation. This is possible on Unix system, as the file descriptor is kept open. This method is \b preferred, because even in the case of a program segfault, the file data is cleaned up by the kernel.

  - \c wincall : on Windows, use direct calls to the Windows API.

  - \c mmap : \c use \c mmap and \c munmap system calls

  - \c boostfd : access the file using a Boost file descriptor

  - \c fileperblock_syscall, \c fileperblock_mmap, \c fileperblock_boostfd : same as above, but take a single file per block, using full_disk_filename as file name prefix.  Usually provide worse performance than the standard variants, but release freed blocks to the file system immediately.

  - \c simdisk : simulates timings of the IBM IC35L080AVVA07 disk, full_disk_filename must point to a file on a RAM disk partition with sufficient space

  - \c memory : keeps all data in RAM, for quicker testing

  - \c wbtl : library-based write-combining (good for writing small blocks onto SSDs), based on \c syscall

Example:
\verbatim
disk=/data01/stxxl,500G,syscall_unlink
disk=/data02/stxxl,300G,syscall_unlink
\endverbatim

On Windows, one usually uses different disk drives and \c wincall.
\verbatim
disk=c:\stxxl,700G,wincall
disk=d:\stxxl,200G,wincall
\endverbatim

\section install_config_filesystem Recommended file system

The library benefits from direct transfers from user memory to disk, which saves superfluous copies.  We recommend to use the \c <a href="http://xfs.org">XFS</a> file system, which gives good read and write performance for large files.  Note that file creation speed of \c XFS is a bit slower, so that disk files should be precreated for optimal performance.

If the filesystems only use is to store one large STXXL disk file, we also recommend to add the following options to the \c mkfs.xfs command to gain maximum performance:
\verbatim
-d agcount=1 -l size=512b
\endverbatim

The following filesystems have been reported not to support direct I/O: \c tmpfs , \c glusterfs .  By default, STXXL will first try to use direct I/O (\c O_DIRECT open flag). If that fails, it will print a warning and open the file without \c O_DIRECT.

\section install_config_logfiles Log files

STXXL produces two kinds of log files, a message and an error log. By setting the environment variables \c STXXLLOGFILE and \c STXXLERRLOGFILE, you can configure the location of these files. The default values are \c stxxl.log and \c stxxl.errlog, respectively.

\section install_config_precreation Precreating External Memory Files

In order to get the maximum performance one can precreate disk files described in the configuration file, before running STXXL applications.

The precreation utility is included in the set of \c STXXL utilities ( \c utils/createdisks.bin ). Run this utility for each disk you have defined in the disk configuration file:
\verbatim
utils/createdisks.bin capacity full_disk_filename...
\endverbatim

*/
