* parallel_pipeling (is currently being developed in it's own branch)

* There is currently no support for Boost libraries (not headers) in a user
  specified location.

* g++ 4.3 parallel_mode support
  => Milestone: 1.2.1

* replace build system, something with '$LIBNAME-config --libs --cflags ...' would be nice

* if the stxxl disk files have been enlarged because more external memory
  was requested by the program, resize them afterwards to
  max(size_at_program_start, configured_size)
  https://sourceforge.net/forum/message.php?msg_id=4925158

* if no .stxxl file was found and /var/tmp/stxxl was used, remove this file
  at program end (don't hog the disk and allow other users to create and
  use that file, too)

* new types: stxxl::size_type_internal stxxl::size_type_external

* stxxl_timestamp ==> stxxl::timestamp

* integrate unordered_map branch
  => Milestone: 1.3

* doxygen: do not link every occurrence of 'file' to stxxl::file

* allocation strategies: provide a method get_num_disks()
  and don't use stxxl::config::get_instance()->disks_number() inappropriately

* interleaved_allocators: provide a constructor that takes a base strategy
  as parameter, not a disk range, and derive desired information from the
  strategy

* implement recursion in stable_ksort and do not assume random key
  distribution, do sampling instead
  as a start, at least abort early if the expected size of a bucket is larger
  than the memory avilable to sort it

* debug stable_ksort in depth, there are still some crashing cases left

* use numeric_limits<> to determine min_value/max_value in all test programs,
  don't hardcode 0xffffffff

* cleanup the COUNT_WAIT_TIME mess

* iostats: print I/O volume not only in bytes, but [KMGT]B as well

* put some stxxl/defines.h (config.h/...) header someewhere,
  listing/describing all the #defines that my be used somewhere

* implement a memfile that simulates an external memory file using heap,
  eases working with valgrind because no data ever leaves valgrind's control

* stxxl::debugmon: FIXME! is not working any more

* replace tons of #ifdef with wrapper that behaves like boost's scoped_lock

* install at_exit hooks that cleanup the singleton objects (memory leaks reported by valgrind)

* split all static get_instance() methods into
  - get_instance (must be inline to reduce overhead)
  - create_instance (may be not inline if too complicated)
      (use proper locking to avoid race conditions)
  - destroy_instance (for the at_exit hook)
      (this of course creates a race condition in improper programs that want to use 
      the instance while/after it has been destroyed)

* continue using the new approach for STXXL_VERBOSE:
  $(CXX) -DSTXXL_VERBOSE_FOO=STXXL_VERBOSEx

